"use client";

import { useEffect, useState } from "react";
import { isValid, z } from "zod";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetDescription, SheetFooter, SheetClose } from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Difficulty } from "@/app/model/Difficulty"; // Assuming you have Difficulty component or type imported
import { Question } from "@/app/model/Question";
import { cn } from "@/lib/utils";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import clsx from "clsx";
// import { useToast } from "@/components/ui/toast";  // You can use a toast component for error messages

// Define the Zod schema for the new question
const questionSchema = z.object({
  question: z.string().min(1, "Question is required."),
  answer: z.string().min(1, "Answer is required."),
//   topic_id: z.number().min(1, "Topic ID is required."),
});

type QuestionForm = z.infer<typeof questionSchema>;

export default function AddQuestionOverlay({ onSave }: { onSave: (question: Question) => void }) {
//   const { toast } = useToast();  // Assuming you have a toast component for showing error messages
  const [newQuestion, setNewQuestion] = useState<Omit<Question, "id">>({
    question: "",
    answer: "",
    topic_id: 1, // Assuming you're getting this from the context or props
    difficulty: {
        id: 1,
        name: "Easy",
        color: "green",
        level: 1,
    } // Default to the first difficulty
  });
  const {
      register,
      handleSubmit,
      formState: { errors, isValid },
    } = useForm<QuestionForm>({
      resolver: zodResolver(questionSchema),
      mode: "onChange", // Ensures validation updates live
    });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
    const [loading, setLoading] = useState(false);
    const [difficulties, setDifficulties] = useState<Difficulty[]>([]);
  
  useEffect(() => {
    setLoading(true);

    const getDifficulties = async () => {
      try {
        const res = await fetch(`/api/difficulty`);
        const data = await res.json();
        console.log("fetch difficulty", data);
        setDifficulties(data);
      } catch (error) {
        console.error("Error fetching difficulty:", error);
      } finally {
        setLoading(false);
      }
    };

    getDifficulties();
  }, []);

  // Handle form submission with validation
  const handleAdd = async () => {
    try {
      setIsSubmitting(true);
      // Validate the question using Zod
      questionSchema.parse(newQuestion);  // This will throw if validation fails

      // If validation passes, call the onSave callback to save the question
      onSave(newQuestion as Question);
      
      // Reset form after successful submission
      setNewQuestion({ question: "", answer: "", topic_id: 1, difficulty: difficulties[0] });
    //   toast({ title: "Success", description: "Question added successfully.", status: "success" });
    } catch (error) {
      if (error instanceof z.ZodError) {
        // Show validation error messages
        error.errors.forEach((err) => {
        //   toast({ title: "Validation Error", description: err.message, status: "error" });
        });
      } else {
        // toast({ title: "Error", description: "An unexpected error occurred.", status: "error" });
      }
    } finally {
      setIsSubmitting(false);
    }
  };

    function getTextColor(color: string): import("clsx").ClassValue {
        return color.includes("yellow") || color.includes("gray") ? "text-black" : "text-white";
    }

  return (
    <Sheet open={true} onOpenChange={() => {}}>
      <SheetContent>
        <SheetHeader>
          <SheetTitle>Add New Question</SheetTitle>
          <SheetDescription>Enter the details for the new question.</SheetDescription>
        </SheetHeader>

        <div className="grid gap-4 py-4">
          {/* Question Field */}
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="question" className="text-right">Question</Label>
            <Textarea
              id="question"
              value={newQuestion.question}
              onChange={(e) => setNewQuestion({ ...newQuestion, question: e.target.value })}
              className="col-span-3"
            />
            {errors.question && <p className="text-red-500">{errors.question.message}</p>}
          </div>

          {/* Answer Field */}
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="answer" className="text-right">Answer</Label>
            <Textarea
              id="answer"
              value={newQuestion.answer}
              onChange={(e) => setNewQuestion({ ...newQuestion, answer: e.target.value })}
              className="col-span-3"
            />
            {errors.answer && <p className="text-red-500">{errors.answer.message}</p>}
          </div>

          
            {/* Difficulty Selection */}
            <div className="grid grid-cols-4 items-center gap-4">
                <Label className="text-right">Difficulty</Label>
                <div className="col-span-3 flex flex-wrap gap-2">
                    {difficulties.map((difficulty) => (
                    <button
                        key={difficulty.id}
                        onClick={() => setNewQuestion({ ...newQuestion, difficulty })}
                        className={clsx(
                            "px-3 py-1 rounded-lg text-sm font-medium transition-colors border-2 shadow-sm cursor-pointer",
                            newQuestion.difficulty.id === difficulty.id
                              ? "border-blue-500 bg-blue-200 shadow-lg shadow-blue-300 scale-105 hover:shadow-blue-400 text-black"
                              : "border-transparent bg-gray-200 hover:border-gray-400",
                            difficulty.color, // Background from DB
                            getTextColor(difficulty.color) // Adjust text color based on background
                        )}
                    >
                        {difficulty.name}
                    </button>
                    ))}
                </div>
            </div>
        </div>

        <SheetFooter>
          <SheetClose asChild>
            <Button type="submit" onClick={handleAdd} disabled={isSubmitting || !isValid}>
              {isSubmitting ? "Saving..." : "Save"}
            </Button>
          </SheetClose>
        </SheetFooter>
      </SheetContent>
    </Sheet>
  );
}
